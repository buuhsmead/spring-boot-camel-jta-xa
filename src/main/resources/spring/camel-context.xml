<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

    <!--    narayanaUserTransaction -->
    <!--    narayanaTransactionManager -->

    <!--    JtaTransactionManager-->
    <!--    -->
    <!--    com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionManagerImple -->
    <!--    com.arjuna.ats.internal.jta.transaction.arjunacore.UserTransactionImple -->


    <!--    <bean id="narayanaTransactionManager"-->
    <!--          class="com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionManagerImple">-->

    <!--    </bean>-->

    <!--    <bean id="narayanaUserTransaction" class="com.arjuna.ats.internal.jta.transaction.arjunacore.UserTransactionImple">-->

    <!--    </bean>-->

    <!-- this is the Spring JtaTransactionManager which under the hood uses Atomikos -->
    <!--    <bean id="jtaTransactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">-->
    <!--        <property name="transactionManager" ref="narayanaTransactionManager"/>-->
    <!--        <property name="userTransaction" ref="narayanaUserTransaction"/>-->
    <!--    </bean>-->


    <!--    https://access.redhat.com/documentation/en-us/red_hat_fuse/7.0/html-single/transaction_guide/index  -->

    <!--    PROPAGATION_REQUIRED-->
    <!--    (Default) Support a current transaction. Create a new one if none exists.-->
    <bean id="PROPAGATION_REQUIRED" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="propagationBehaviorName" value="PROPAGATION_REQUIRED"/>
    </bean>

    <!--    PROPAGATION_NEVER-->
    <!--    Do not support a current transaction. Throw an exception if a current transaction exists.-->
    <bean id="PROPAGATION_NEVER" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="propagationBehaviorName" value="PROPAGATION_NEVER"/>
    </bean>


    <!--    PROPAGATION_REQUIRES_NEW-->
    <!--    Create a new transaction, suspending the current transaction if one exists.-->
    <bean id="PROPAGATION_REQUIRES_NEW" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="propagationBehaviorName" value="PROPAGATION_REQUIRES_NEW"/>
    </bean>


    <!--    PROPAGATION_MANDATORY-->
    <!--    Support a current transaction. Throw an exception if no current transaction exists.-->
    <bean id="PROPAGATION_MANDATORY" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="propagationBehaviorName" value="PROPAGATION_MANDATORY"/>
    </bean>

    <!--    PROPAGATION_NESTED-->
    <!--    Execute within a nested transaction if a current transaction exists, else behave like PROPAGATION_REQUIRED.-->
    <bean id="PROPAGATION_NESTED" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="propagationBehaviorName" value="PROPAGATION_NESTED"/>
    </bean>

    <!--    PROPAGATION_NOT_SUPPORTED-->
    <!--    Do not support a current transaction. Always execute non-transactionally.-->
    <bean id="PROPAGATION_NOT_SUPPORTED" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="propagationBehaviorName" value="PROPAGATION_NOT_SUPPORTED"/>
    </bean>

    <!--    PROPAGATION_SUPPORTS-->
    <!--    Support a current transaction. Execute non-transactionally if none exists.-->
    <bean id="PROPAGATION_SUPPORTS" class="org.apache.camel.spring.spi.SpringTransactionPolicy">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="propagationBehaviorName" value="PROPAGATION_SUPPORTS"/>
    </bean>


    <!-- Define a traditional camel context here -->
    <camelContext id="sb-camel" xmlns="http://camel.apache.org/schema/spring">

        <route id="simple-route">
            <from id="route-timer" uri="timer:fooxa?period=4000"/>
            <transacted ref="PROPAGATION_REQUIRES_NEW"/>
            <log id="route-log" message=">>> ${body}"/>
            <setBody>
                <simple>Een bericht voor nested</simple>
            </setBody>
            <to uri="jms:queue:TEST?disableReplyTo=true"/>
            <to uri="sql:INSERT INTO T_RECORD(NAME,AMOUNT) VALUES('must in database', 91)"/>
            <log message="AFTER ONE INSERT"/>

            <to uri="direct:nestedTX"/>
            <log message="AFTER CALL NESTEDTX"/>

        </route>

        <route id="do-nested-tx">
            <from id="start-nested-tx" uri="direct:nestedTX"/>
            <!--           <transacted ref="PROPAGATION_REQUIRES_NEW"/>-->
            <transacted/>
            <setBody>
                <simple>A nested TX message.</simple>
            </setBody>
            <to uri="jms:queue:TEST?disableReplyTo=true"/>
            <to uri="sql:INSERT INTO T_RECORD(NAME,AMOUNT) VALUES('must not be in database', 81)"/>
            <log message="AFTER ONE NESTED INSERT"/>

            <throwException exceptionType="java.lang.IllegalArgumentException" message="FAIL on purpose"/>

        </route>

    </camelContext>

</beans>
